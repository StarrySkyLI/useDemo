// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: demo_service.proto

package fileservice

import (
	"context"

	"useDemo/application/rpc_demo/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FileContext                        = rpc.FileContext
	GameInfo                           = rpc.GameInfo
	GameInfoRep                        = rpc.GameInfoRep
	GameInfoReq                        = rpc.GameInfoReq
	GameListRep                        = rpc.GameListRep
	GameListReq                        = rpc.GameListReq
	GetFileInfoByIdRequest             = rpc.GetFileInfoByIdRequest
	GetFileInfoByIdResponse            = rpc.GetFileInfoByIdResponse
	GetProgressRate4SlicingPutRequest  = rpc.GetProgressRate4SlicingPutRequest
	GetProgressRate4SlicingPutResponse = rpc.GetProgressRate4SlicingPutResponse
	MergeFilePartsRequest              = rpc.MergeFilePartsRequest
	MergeFilePartsResponse             = rpc.MergeFilePartsResponse
	Metadata                           = rpc.Metadata
	PaginationRequest                  = rpc.PaginationRequest
	PaginationResponse                 = rpc.PaginationResponse
	PreSignGetRequest                  = rpc.PreSignGetRequest
	PreSignGetResponse                 = rpc.PreSignGetResponse
	PreSignPutRequest                  = rpc.PreSignPutRequest
	PreSignPutResponse                 = rpc.PreSignPutResponse
	PreSignSlicingPutRequest           = rpc.PreSignSlicingPutRequest
	PreSignSlicingPutResponse          = rpc.PreSignSlicingPutResponse
	RemoveFileRequest                  = rpc.RemoveFileRequest
	RemoveFileResponse                 = rpc.RemoveFileResponse
	ReportUploadedFilePartsRequest     = rpc.ReportUploadedFilePartsRequest
	ReportUploadedFilePartsResponse    = rpc.ReportUploadedFilePartsResponse
	ReportUploadedRequest              = rpc.ReportUploadedRequest
	ReportUploadedResponse             = rpc.ReportUploadedResponse
	Request                            = rpc.Request
	Response                           = rpc.Response
	SearchField                        = rpc.SearchField
	SearchRequest                      = rpc.SearchRequest
	SortField                          = rpc.SortField

	FileService interface {
		// pre sign a file url for user get it
		PreSignGet(ctx context.Context, in *PreSignGetRequest, opts ...grpc.CallOption) (*PreSignGetResponse, error)
		// pre sign a file url for user put it
		PreSignPut(ctx context.Context, in *PreSignPutRequest, opts ...grpc.CallOption) (*PreSignPutResponse, error)
		// report a file has been uploaded
		ReportUploaded(ctx context.Context, in *ReportUploadedRequest, opts ...grpc.CallOption) (*ReportUploadedResponse, error)
		// pre sign a file url for user put it with slicing
		PreSignSlicingPut(ctx context.Context, in *PreSignSlicingPutRequest, opts ...grpc.CallOption) (*PreSignSlicingPutResponse, error)
		// get upload progress rate for slicing put
		GetProgressRate4SlicingPut(ctx context.Context, in *GetProgressRate4SlicingPutRequest, opts ...grpc.CallOption) (*GetProgressRate4SlicingPutResponse, error)
		// merge a slicing uploading file
		MergeFileParts(ctx context.Context, in *MergeFilePartsRequest, opts ...grpc.CallOption) (*MergeFilePartsResponse, error)
		// remove a file
		RemoveFile(ctx context.Context, in *RemoveFileRequest, opts ...grpc.CallOption) (*RemoveFileResponse, error)
		GetFileInfoById(ctx context.Context, in *GetFileInfoByIdRequest, opts ...grpc.CallOption) (*GetFileInfoByIdResponse, error)
	}

	defaultFileService struct {
		cli zrpc.Client
	}
)

func NewFileService(cli zrpc.Client) FileService {
	return &defaultFileService{
		cli: cli,
	}
}

// pre sign a file url for user get it
func (m *defaultFileService) PreSignGet(ctx context.Context, in *PreSignGetRequest, opts ...grpc.CallOption) (*PreSignGetResponse, error) {
	client := rpc.NewFileServiceClient(m.cli.Conn())
	return client.PreSignGet(ctx, in, opts...)
}

// pre sign a file url for user put it
func (m *defaultFileService) PreSignPut(ctx context.Context, in *PreSignPutRequest, opts ...grpc.CallOption) (*PreSignPutResponse, error) {
	client := rpc.NewFileServiceClient(m.cli.Conn())
	return client.PreSignPut(ctx, in, opts...)
}

// report a file has been uploaded
func (m *defaultFileService) ReportUploaded(ctx context.Context, in *ReportUploadedRequest, opts ...grpc.CallOption) (*ReportUploadedResponse, error) {
	client := rpc.NewFileServiceClient(m.cli.Conn())
	return client.ReportUploaded(ctx, in, opts...)
}

// pre sign a file url for user put it with slicing
func (m *defaultFileService) PreSignSlicingPut(ctx context.Context, in *PreSignSlicingPutRequest, opts ...grpc.CallOption) (*PreSignSlicingPutResponse, error) {
	client := rpc.NewFileServiceClient(m.cli.Conn())
	return client.PreSignSlicingPut(ctx, in, opts...)
}

// get upload progress rate for slicing put
func (m *defaultFileService) GetProgressRate4SlicingPut(ctx context.Context, in *GetProgressRate4SlicingPutRequest, opts ...grpc.CallOption) (*GetProgressRate4SlicingPutResponse, error) {
	client := rpc.NewFileServiceClient(m.cli.Conn())
	return client.GetProgressRate4SlicingPut(ctx, in, opts...)
}

// merge a slicing uploading file
func (m *defaultFileService) MergeFileParts(ctx context.Context, in *MergeFilePartsRequest, opts ...grpc.CallOption) (*MergeFilePartsResponse, error) {
	client := rpc.NewFileServiceClient(m.cli.Conn())
	return client.MergeFileParts(ctx, in, opts...)
}

// remove a file
func (m *defaultFileService) RemoveFile(ctx context.Context, in *RemoveFileRequest, opts ...grpc.CallOption) (*RemoveFileResponse, error) {
	client := rpc.NewFileServiceClient(m.cli.Conn())
	return client.RemoveFile(ctx, in, opts...)
}

func (m *defaultFileService) GetFileInfoById(ctx context.Context, in *GetFileInfoByIdRequest, opts ...grpc.CallOption) (*GetFileInfoByIdResponse, error) {
	client := rpc.NewFileServiceClient(m.cli.Conn())
	return client.GetFileInfoById(ctx, in, opts...)
}
