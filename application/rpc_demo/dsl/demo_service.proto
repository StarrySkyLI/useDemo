syntax = "proto3";
package rpc;
option go_package ="./rpc";





service FileService {
  // pre sign a file url for user get it
  rpc PreSignGet(PreSignGetRequest) returns (PreSignGetResponse);
  // pre sign a file url for user put it
  rpc PreSignPut(PreSignPutRequest) returns (PreSignPutResponse);
  // report a file has been uploaded
  rpc ReportUploaded(ReportUploadedRequest) returns (ReportUploadedResponse);
  // pre sign a file url for user put it with slicing
  rpc PreSignSlicingPut(PreSignSlicingPutRequest) returns (PreSignSlicingPutResponse);
  // get upload progress rate for slicing put
  rpc GetProgressRate4SlicingPut(GetProgressRate4SlicingPutRequest) returns (GetProgressRate4SlicingPutResponse);
  // merge a slicing uploading file
  rpc MergeFileParts(MergeFilePartsRequest) returns (MergeFilePartsResponse);
  // remove a file
  rpc RemoveFile(RemoveFileRequest) returns (RemoveFileResponse);
  rpc GetFileInfoById(GetFileInfoByIdRequest) returns (GetFileInfoByIdResponse);
}

message FileContext {
  // 所属业务领域，用于创建bucket
  string domain = 1;
  // 所属业务名称
  string biz_name = 2;
  int64 file_id = 3;
  // 文件md5
  string hash = 4;
  // 文件类型
  string file_type = 5;
  // 文件大小，单位byte
  int64 size = 6;
  // 文件访问链接的过期时间
  int64 expire_seconds = 7;
  // 文件名
  string filename = 8;
}

message PreSignGetRequest {
  FileContext file_context = 1;
}

message PreSignGetResponse {
  Metadata meta = 1;
  string url = 2;
}

message PreSignPutRequest {
  FileContext file_context = 1;
}

message PreSignPutResponse {
  Metadata meta = 1;
  string url = 2;
  // file_id will be not null if the put request file hash has been uploaded
  int64 file_id = 3;
}

message ReportUploadedRequest {
  FileContext file_context = 1;
}

message ReportUploadedResponse {
  Metadata meta = 1;
  string url = 2;
}

message PreSignSlicingPutRequest {
  FileContext file_context = 1;
}

message PreSignSlicingPutResponse {
 Metadata meta = 1;
  repeated string urls = 2;
  string upload_id = 3;
  int64 parts = 4;
  int64 file_id = 5;
  // if a file has been uploaded, this field will be true
  bool uploaded = 6;
}

message GetProgressRate4SlicingPutRequest {
  FileContext file_context = 1;
  string upload_id = 2;
}

message GetProgressRate4SlicingPutResponse {
  Metadata meta = 1;
  // 进度百分比
  float progress_rate = 2;
  // 分片上传情况
  map<string, bool> parts = 3;
}

message ReportUploadedFilePartsRequest {
  string upload_id = 1;
  int64 file_id = 2;
  int64 part_number = 3;
}

message ReportUploadedFilePartsResponse {
  Metadata meta = 1;
}

message MergeFilePartsRequest {
  FileContext file_context = 1;
  string upload_id = 2;
}

message MergeFilePartsResponse {
  Metadata meta = 1;
}

message RemoveFileRequest {
  FileContext file_context = 1;
}

message RemoveFileResponse {
  Metadata meta = 1;
}

message GetFileInfoByIdRequest {
  int64 file_id = 1;
  string domain_name = 2;
  string biz_name = 3;
}

message GetFileInfoByIdResponse {
  Metadata meta = 1;
  string object_name = 2;
  string hash = 3;
}



message Metadata {
  int32 biz_code = 1;
  string message = 2;
  string domain = 3;
  repeated string reason = 4;
}

enum SortOrder {
  ASC = 0;
  DESC = 1;
}

message SortField {
  string field = 1; // 用于排序的字段名称
  SortOrder order = 2; // 排序方式
}

message PaginationRequest {
  int32 page = 1; // 页码 [1, +∞)
  int32 size = 2; // 页面大小
  repeated SortField sort = 3; // 根据字段进行排序
}

message PaginationResponse {
  int32 page = 1; // 当前数据的所属页码
  int32 total = 2; // 总页数
  int32 count = 3; // 总条目数
}

enum SearchOperator {
  EQ = 0; // 等于
  NE = 1; // 不等于
  GT = 2; // 大于
  GE = 3; // 大于等于
  LT = 4; // 小于
  LE = 5; // 小于等于
  LIKE = 6; // 使用like的模糊匹配
  WILDCARD = 7; // 使用通配符的模糊匹配
  IN = 8; // 在指定的集合中
  NOT_IN = 9; // 不在指定的集合中
  BETWEEN = 10; // 在指定的范围内
  RE = 11; // 正则匹配
}

message SearchField {
  string field = 1; // 用于搜索的字段名称
  string value = 2; // 搜索的值
  repeated string value_list = 3; // 搜索的值列表
  SearchOperator operator = 4; // 操作符
}

message SearchRequest {
  repeated SearchField search = 1; // 搜索条件
}

message Request {
  string ping = 1;
}

message Response {
  string pong = 1;
}
message GameInfoReq{
  int64 id =1;
}
message GameInfo{
  int64 id=1;
  string name=2;
  string code=3;
  string data=4;
  string create_time=5;
  string update_time=6;
}
message GameInfoRep{
  GameInfo info=1;
}
message GameListReq{
  int32 page =1;
  int32 pageSize=2;
}
message GameListRep{
  repeated GameInfo list=1;
}
service Rpc_demo {
  rpc Ping(Request) returns(Response);
  rpc FindOne (GameInfoReq) returns (GameInfoRep);
  rpc GameList (GameListReq) returns ( GameListRep);
  rpc GameListExport (GameListReq) returns (stream GameInfo);

}
