// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: dsl/rpc_demo.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RpcDemo_Ping_FullMethodName           = "/rpc.Rpc_demo/Ping"
	RpcDemo_FindOne_FullMethodName        = "/rpc.Rpc_demo/FindOne"
	RpcDemo_GameList_FullMethodName       = "/rpc.Rpc_demo/GameList"
	RpcDemo_GameListExport_FullMethodName = "/rpc.Rpc_demo/GameListExport"
)

// RpcDemoClient is the client API for RpcDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcDemoClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	FindOne(ctx context.Context, in *GameInfoReq, opts ...grpc.CallOption) (*GameInfoRep, error)
	GameList(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (*GameListRep, error)
	GameListExport(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (RpcDemo_GameListExportClient, error)
}

type rpcDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcDemoClient(cc grpc.ClientConnInterface) RpcDemoClient {
	return &rpcDemoClient{cc}
}

func (c *rpcDemoClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, RpcDemo_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDemoClient) FindOne(ctx context.Context, in *GameInfoReq, opts ...grpc.CallOption) (*GameInfoRep, error) {
	out := new(GameInfoRep)
	err := c.cc.Invoke(ctx, RpcDemo_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDemoClient) GameList(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (*GameListRep, error) {
	out := new(GameListRep)
	err := c.cc.Invoke(ctx, RpcDemo_GameList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDemoClient) GameListExport(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (RpcDemo_GameListExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &RpcDemo_ServiceDesc.Streams[0], RpcDemo_GameListExport_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcDemoGameListExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RpcDemo_GameListExportClient interface {
	Recv() (*GameInfo, error)
	grpc.ClientStream
}

type rpcDemoGameListExportClient struct {
	grpc.ClientStream
}

func (x *rpcDemoGameListExportClient) Recv() (*GameInfo, error) {
	m := new(GameInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RpcDemoServer is the server API for RpcDemo service.
// All implementations must embed UnimplementedRpcDemoServer
// for forward compatibility
type RpcDemoServer interface {
	Ping(context.Context, *Request) (*Response, error)
	FindOne(context.Context, *GameInfoReq) (*GameInfoRep, error)
	GameList(context.Context, *GameListReq) (*GameListRep, error)
	GameListExport(*GameListReq, RpcDemo_GameListExportServer) error
	mustEmbedUnimplementedRpcDemoServer()
}

// UnimplementedRpcDemoServer must be embedded to have forward compatible implementations.
type UnimplementedRpcDemoServer struct {
}

func (UnimplementedRpcDemoServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRpcDemoServer) FindOne(context.Context, *GameInfoReq) (*GameInfoRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedRpcDemoServer) GameList(context.Context, *GameListReq) (*GameListRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameList not implemented")
}
func (UnimplementedRpcDemoServer) GameListExport(*GameListReq, RpcDemo_GameListExportServer) error {
	return status.Errorf(codes.Unimplemented, "method GameListExport not implemented")
}
func (UnimplementedRpcDemoServer) mustEmbedUnimplementedRpcDemoServer() {}

// UnsafeRpcDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcDemoServer will
// result in compilation errors.
type UnsafeRpcDemoServer interface {
	mustEmbedUnimplementedRpcDemoServer()
}

func RegisterRpcDemoServer(s grpc.ServiceRegistrar, srv RpcDemoServer) {
	s.RegisterService(&RpcDemo_ServiceDesc, srv)
}

func _RpcDemo_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDemoServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpcDemo_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDemoServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDemo_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDemoServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpcDemo_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDemoServer).FindOne(ctx, req.(*GameInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDemo_GameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDemoServer).GameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpcDemo_GameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDemoServer).GameList(ctx, req.(*GameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDemo_GameListExport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GameListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RpcDemoServer).GameListExport(m, &rpcDemoGameListExportServer{stream})
}

type RpcDemo_GameListExportServer interface {
	Send(*GameInfo) error
	grpc.ServerStream
}

type rpcDemoGameListExportServer struct {
	grpc.ServerStream
}

func (x *rpcDemoGameListExportServer) Send(m *GameInfo) error {
	return x.ServerStream.SendMsg(m)
}

// RpcDemo_ServiceDesc is the grpc.ServiceDesc for RpcDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Rpc_demo",
	HandlerType: (*RpcDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _RpcDemo_Ping_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _RpcDemo_FindOne_Handler,
		},
		{
			MethodName: "GameList",
			Handler:    _RpcDemo_GameList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GameListExport",
			Handler:       _RpcDemo_GameListExport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dsl/rpc_demo.proto",
}
