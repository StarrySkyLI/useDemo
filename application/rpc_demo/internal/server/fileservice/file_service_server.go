// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: demo_service.proto

package server

import (
	"context"

	"useDemo/application/rpc_demo/internal/logic/fileservice"
	"useDemo/application/rpc_demo/internal/svc"
	"useDemo/application/rpc_demo/rpc"
)

type FileServiceServer struct {
	svcCtx *svc.ServiceContext
	rpc.UnimplementedFileServiceServer
}

func NewFileServiceServer(svcCtx *svc.ServiceContext) *FileServiceServer {
	return &FileServiceServer{
		svcCtx: svcCtx,
	}
}

// pre sign a file url for user get it
func (s *FileServiceServer) PreSignGet(ctx context.Context, in *rpc.PreSignGetRequest) (*rpc.PreSignGetResponse, error) {
	l := fileservicelogic.NewPreSignGetLogic(ctx, s.svcCtx)
	return l.PreSignGet(in)
}

// pre sign a file url for user put it
func (s *FileServiceServer) PreSignPut(ctx context.Context, in *rpc.PreSignPutRequest) (*rpc.PreSignPutResponse, error) {
	l := fileservicelogic.NewPreSignPutLogic(ctx, s.svcCtx)
	return l.PreSignPut(in)
}

// report a file has been uploaded
func (s *FileServiceServer) ReportUploaded(ctx context.Context, in *rpc.ReportUploadedRequest) (*rpc.ReportUploadedResponse, error) {
	l := fileservicelogic.NewReportUploadedLogic(ctx, s.svcCtx)
	return l.ReportUploaded(in)
}

// pre sign a file url for user put it with slicing
func (s *FileServiceServer) PreSignSlicingPut(ctx context.Context, in *rpc.PreSignSlicingPutRequest) (*rpc.PreSignSlicingPutResponse, error) {
	l := fileservicelogic.NewPreSignSlicingPutLogic(ctx, s.svcCtx)
	return l.PreSignSlicingPut(in)
}

// get upload progress rate for slicing put
func (s *FileServiceServer) GetProgressRate4SlicingPut(ctx context.Context, in *rpc.GetProgressRate4SlicingPutRequest) (*rpc.GetProgressRate4SlicingPutResponse, error) {
	l := fileservicelogic.NewGetProgressRate4SlicingPutLogic(ctx, s.svcCtx)
	return l.GetProgressRate4SlicingPut(in)
}

// merge a slicing uploading file
func (s *FileServiceServer) MergeFileParts(ctx context.Context, in *rpc.MergeFilePartsRequest) (*rpc.MergeFilePartsResponse, error) {
	l := fileservicelogic.NewMergeFilePartsLogic(ctx, s.svcCtx)
	return l.MergeFileParts(in)
}

// remove a file
func (s *FileServiceServer) RemoveFile(ctx context.Context, in *rpc.RemoveFileRequest) (*rpc.RemoveFileResponse, error) {
	l := fileservicelogic.NewRemoveFileLogic(ctx, s.svcCtx)
	return l.RemoveFile(in)
}

func (s *FileServiceServer) GetFileInfoById(ctx context.Context, in *rpc.GetFileInfoByIdRequest) (*rpc.GetFileInfoByIdResponse, error) {
	l := fileservicelogic.NewGetFileInfoByIdLogic(ctx, s.svcCtx)
	return l.GetFileInfoById(in)
}
