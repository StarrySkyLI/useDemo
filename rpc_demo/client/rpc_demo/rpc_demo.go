// Code generated by goctl. DO NOT EDIT.
// Source: rpc_demo.proto

package rpc_demo

import (
	"context"

	"rpc_demo/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GameInfo    = rpc.GameInfo
	GameInfoRep = rpc.GameInfoRep
	GameInfoReq = rpc.GameInfoReq
	GameListRep = rpc.GameListRep
	GameListReq = rpc.GameListReq
	Request     = rpc.Request
	Response    = rpc.Response

	RpcDemo interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		FindOne(ctx context.Context, in *GameInfoReq, opts ...grpc.CallOption) (*GameInfoRep, error)
		GameList(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (*GameListRep, error)
	}

	defaultRpcDemo struct {
		cli zrpc.Client
	}
)

func NewRpcDemo(cli zrpc.Client) RpcDemo {
	return &defaultRpcDemo{
		cli: cli,
	}
}

func (m *defaultRpcDemo) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := rpc.NewRpcDemoClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultRpcDemo) FindOne(ctx context.Context, in *GameInfoReq, opts ...grpc.CallOption) (*GameInfoRep, error) {
	client := rpc.NewRpcDemoClient(m.cli.Conn())
	return client.FindOne(ctx, in, opts...)
}

func (m *defaultRpcDemo) GameList(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (*GameListRep, error) {
	client := rpc.NewRpcDemoClient(m.cli.Conn())
	return client.GameList(ctx, in, opts...)
}
